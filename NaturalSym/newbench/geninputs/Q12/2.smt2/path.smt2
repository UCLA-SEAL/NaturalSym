
(set-logic QF_ASNIA)
(set-option :produce-models true)
(set-option :strings-exp true)


(define-fun isinteger ((x!1 String)) Bool (str.in_re x!1 (re.+ (re.range "0" "9")))  )
(define-fun notinteger ((x!1 String)) Bool (not (isinteger x!1)) )
(define-fun real.str.from_int ((i Int)) String (ite (< i 0) (str.++ "-" (str.from_int (- i))) (str.from_int i)))
(define-fun real.str.to_int ((i String)) Int (ite (= (str.substr i 0 1) "-") (- (str.to_int (str.substr i 1 (- (str.len i) 1)))) (str.to_int i)))

(declare-fun x25_P1 () Int)
(declare-fun x20_P1 () String)
(declare-fun input2_P1 () String)
(declare-fun input1_P2_d14 () String)
(declare-fun input1_P1_d23 () String)
(declare-fun input3_P2_d1 () String)
(declare-fun input1_P2_d2 () String)
(declare-fun x22_P1 () String)
(declare-fun input1_P1_d31 () String)
(declare-fun input3_P1_d0 () String)
(declare-fun input1_P1_d33 () String)
(declare-fun input1_P1_d8 () String)
(declare-fun input1_P2_d6 () String)
(declare-fun input3_P1_d3 () String)
(declare-fun input1_P2_d19 () String)
(declare-fun x1_P2 () String)
(declare-fun input3_P1_d1 () String)
(declare-fun input3_P2_d6 () String)
(declare-fun input1_P2_d18 () String)
(declare-fun input1_P2_d9 () String)
(declare-fun input2_P2 () String)
(declare-fun input3_P2_d12 () String)
(declare-fun input2_P2_d1 () String)
(declare-fun input1_P2_d1 () String)
(declare-fun input1_P1_d13 () String)
(declare-fun input1_P1_d29 () String)
(declare-fun input1_P2_d26 () String)
(declare-fun x6_P2 () String)
(declare-fun input1_P2_d10 () String)
(declare-fun input1_P2_d21 () String)
(declare-fun input1_P1 () String)
(declare-fun input1_P1_d30 () String)
(declare-fun x6_P1 () String)
(declare-fun input1_P1_d28 () String)
(declare-fun input1_P2_d11 () String)
(declare-fun input3_P1_d10 () String)
(declare-fun input3_P1_d7 () String)
(declare-fun input1_P2 () String)
(declare-fun input1_P1_d10 () String)
(declare-fun input3_P1_d9 () String)
(declare-fun input3_P2_d8 () String)
(declare-fun x25_P2 () Int)
(declare-fun input1_P2_d31 () String)
(declare-fun input1_P1_d27 () String)
(declare-fun input1_P2_d30 () String)
(declare-fun input3_P2_d11 () String)
(declare-fun input3_P1_d2 () String)
(declare-fun input2_P1_d1 () String)
(declare-fun input1_P1_d22 () String)
(declare-fun x24_P1 () String)
(declare-fun input1_P2_d4 () String)
(declare-fun input1_P1_d19 () String)
(declare-fun input3_P2_d5 () String)
(declare-fun input1_P2_d22 () String)
(declare-fun x1_P1 () String)
(declare-fun input3_P2_d9 () String)
(declare-fun input1_P2_d28 () String)
(declare-fun input3_P2_d2 () String)
(declare-fun input1_P2_d16 () String)
(declare-fun x16_P1 () String)
(declare-fun input3_P2_d0 () String)
(declare-fun input1_P1_d5 () String)
(declare-fun x23_P2 () String)
(declare-fun input1_P2_d8 () String)
(declare-fun input3_P1 () String)
(declare-fun input3_P1_d4 () String)
(declare-fun input2_P1_d0 () String)
(declare-fun input3_P1_d5 () String)
(declare-fun x30 () Int)
(declare-fun input1_P1_d15 () String)
(declare-fun input1_P1_d20 () String)
(declare-fun x23_P1 () String)
(declare-fun x24_P2 () String)
(declare-fun input1_P1_d12 () String)
(declare-fun x9_P1 () String)
(declare-fun x31 () (Array Int Int))
(declare-fun input1_P1_d3 () String)
(declare-fun input1_P2_d15 () String)
(declare-fun input1_P1_d6 () String)
(declare-fun x27 () Int)
(declare-fun input1_P2_d23 () String)
(declare-fun x22_P2 () String)
(declare-fun input1_P1_d2 () String)
(declare-fun input3_P2_d10 () String)
(declare-fun input1_P1_d0 () String)
(declare-fun input1_P2_d25 () String)
(declare-fun input3_P2_d7 () String)
(declare-fun input1_P1_d14 () String)
(declare-fun input1_P2_d13 () String)
(declare-fun input3_P1_d11 () String)
(declare-fun x9_P2 () String)
(declare-fun input1_P1_d25 () String)
(declare-fun input1_P1_d4 () String)
(declare-fun input1_P1_d9 () String)
(declare-fun x21_P1 () String)
(declare-fun input3_P2_d3 () String)
(declare-fun input2_P2_d2 () String)
(declare-fun input1_P2_d32 () String)
(declare-fun input1_P1_d32 () String)
(declare-fun input1_P2_d17 () String)
(declare-fun input3_P1_d6 () String)
(declare-fun input3_P1_d12 () String)
(declare-fun input1_P2_d27 () String)
(declare-fun x16_P2 () String)
(declare-fun input3_P1_d8 () String)
(declare-fun input1_P1_d11 () String)
(declare-fun input1_P2_d12 () String)
(declare-fun x21_P2 () String)
(declare-fun input1_P1_d7 () String)
(declare-fun input1_P2_d5 () String)
(declare-fun x20_P2 () String)
(declare-fun input1_P2_d3 () String)
(declare-fun input1_P1_d24 () String)
(declare-fun input3_P2 () String)
(declare-fun input1_P2_d24 () String)
(declare-fun x29 () Int)
(declare-fun input1_P2_d20 () String)
(declare-fun input1_P2_d33 () String)
(declare-fun input1_P2_d29 () String)
(declare-fun input1_P2_d7 () String)
(declare-fun x28 () Int)
(declare-fun input1_P1_d18 () String)
(declare-fun input1_P2_d0 () String)
(declare-fun input2_P1_d2 () String)
(declare-fun input1_P1_d16 () String)
(declare-fun input1_P1_d1 () String)
(declare-fun input3_P2_d4 () String)
(declare-fun input1_P1_d26 () String)
(declare-fun input1_P1_d17 () String)
(declare-fun input1_P1_d21 () String)
(declare-fun input2_P2_d0 () String)



     
(declare-fun input3_P1_d13 () String)
(declare-fun input3_P1_d14 () String)
(declare-fun input3_P1_d15 () String)
(declare-fun input3_P1_d16 () String)
(declare-fun input3_P1_d17 () String)
(declare-fun input3_P1_d18 () String)
(declare-fun input3_P1_d19 () String)
(declare-fun input3_P1_d20 () String)
(declare-fun input3_P1_d21 () String)
(declare-fun input2_P2_d3 () String)
(declare-fun input2_P2_d4 () String)
(declare-fun input2_P2_d5 () String)
(declare-fun input2_P2_d6 () String)
(declare-fun input2_P2_d7 () String)
(declare-fun input2_P2_d8 () String)
(declare-fun input2_P2_d9 () String)
(declare-fun input2_P2_d10 () String)
(declare-fun input2_P2_d11 () String)
(declare-fun input2_P2_d12 () String)
(declare-fun input2_P2_d13 () String)
(declare-fun input2_P2_d14 () String)
(declare-fun input2_P2_d15 () String)
(declare-fun input2_P2_d16 () String)
(declare-fun input2_P2_d17 () String)
(declare-fun input2_P2_d18 () String)
(declare-fun input2_P2_d19 () String)
(declare-fun input2_P2_d20 () String)
(declare-fun input2_P2_d21 () String)
(declare-fun input2_P2_d22 () String)
(declare-fun input2_P2_d23 () String)
(declare-fun input2_P2_d24 () String)
(declare-fun input2_P2_d25 () String)
(declare-fun input2_P2_d26 () String)
(declare-fun input2_P2_d27 () String)
(declare-fun input2_P1_d3 () String)
(declare-fun input2_P1_d4 () String)
(declare-fun input2_P1_d5 () String)
(declare-fun input2_P1_d6 () String)
(declare-fun input2_P1_d7 () String)
(declare-fun input2_P1_d8 () String)
(declare-fun input2_P1_d9 () String)
(declare-fun input2_P1_d10 () String)
(declare-fun input2_P1_d11 () String)
(declare-fun input2_P1_d12 () String)
(declare-fun input2_P1_d13 () String)
(declare-fun input2_P1_d14 () String)
(declare-fun input2_P1_d15 () String)
(declare-fun input2_P1_d16 () String)
(declare-fun input2_P1_d17 () String)
(declare-fun input2_P1_d18 () String)
(declare-fun input2_P1_d19 () String)
(declare-fun input2_P1_d20 () String)
(declare-fun input2_P1_d21 () String)
(declare-fun input2_P1_d22 () String)
(declare-fun input2_P1_d23 () String)
(declare-fun input2_P1_d24 () String)
(declare-fun input2_P1_d25 () String)
(declare-fun input2_P1_d26 () String)
(declare-fun input2_P1_d27 () String)
(declare-fun input3_P2_d13 () String)
(declare-fun input3_P2_d14 () String)
(declare-fun input3_P2_d15 () String)
(declare-fun input3_P2_d16 () String)
(declare-fun input3_P2_d17 () String)
(declare-fun input3_P2_d18 () String)
(declare-fun input3_P2_d19 () String)
(declare-fun input3_P2_d20 () String)
(declare-fun input3_P2_d21 () String)
(assert (= input3_P1 (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ input3_P1_d0 (str.++ "," input3_P1_d1)) (str.++ "," input3_P1_d2)) (str.++ "," input3_P1_d3)) (str.++ "," input3_P1_d4)) (str.++ "," input3_P1_d5)) (str.++ "," input3_P1_d6)) (str.++ "," input3_P1_d7)) (str.++ "," input3_P1_d8)) (str.++ "," input3_P1_d9)) (str.++ "," input3_P1_d10)) (str.++ "," input3_P1_d11)) (str.++ "," input3_P1_d12)) (str.++ "," input3_P1_d13)) (str.++ "," input3_P1_d14)) (str.++ "," input3_P1_d15)) (str.++ "," input3_P1_d16)) (str.++ "," input3_P1_d17)) (str.++ "," input3_P1_d18)) (str.++ "," input3_P1_d19)) (str.++ "," input3_P1_d20)) (str.++ "," input3_P1_d21)))); splitHandler input3_P1 22
(assert (= input1_P1 (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ input1_P1_d0 (str.++ "," input1_P1_d1)) (str.++ "," input1_P1_d2)) (str.++ "," input1_P1_d3)) (str.++ "," input1_P1_d4)) (str.++ "," input1_P1_d5)) (str.++ "," input1_P1_d6)) (str.++ "," input1_P1_d7)) (str.++ "," input1_P1_d8)) (str.++ "," input1_P1_d9)) (str.++ "," input1_P1_d10)) (str.++ "," input1_P1_d11)) (str.++ "," input1_P1_d12)) (str.++ "," input1_P1_d13)) (str.++ "," input1_P1_d14)) (str.++ "," input1_P1_d15)) (str.++ "," input1_P1_d16)) (str.++ "," input1_P1_d17)) (str.++ "," input1_P1_d18)) (str.++ "," input1_P1_d19)) (str.++ "," input1_P1_d20)) (str.++ "," input1_P1_d21)) (str.++ "," input1_P1_d22)) (str.++ "," input1_P1_d23)) (str.++ "," input1_P1_d24)) (str.++ "," input1_P1_d25)) (str.++ "," input1_P1_d26)) (str.++ "," input1_P1_d27)) (str.++ "," input1_P1_d28)) (str.++ "," input1_P1_d29)) (str.++ "," input1_P1_d30)) (str.++ "," input1_P1_d31)) (str.++ "," input1_P1_d32)) (str.++ "," input1_P1_d33)))); splitHandler input1_P1 34
(assert (= input2_P2 (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ input2_P2_d0 (str.++ "," input2_P2_d1)) (str.++ "," input2_P2_d2)) (str.++ "," input2_P2_d3)) (str.++ "," input2_P2_d4)) (str.++ "," input2_P2_d5)) (str.++ "," input2_P2_d6)) (str.++ "," input2_P2_d7)) (str.++ "," input2_P2_d8)) (str.++ "," input2_P2_d9)) (str.++ "," input2_P2_d10)) (str.++ "," input2_P2_d11)) (str.++ "," input2_P2_d12)) (str.++ "," input2_P2_d13)) (str.++ "," input2_P2_d14)) (str.++ "," input2_P2_d15)) (str.++ "," input2_P2_d16)) (str.++ "," input2_P2_d17)) (str.++ "," input2_P2_d18)) (str.++ "," input2_P2_d19)) (str.++ "," input2_P2_d20)) (str.++ "," input2_P2_d21)) (str.++ "," input2_P2_d22)) (str.++ "," input2_P2_d23)) (str.++ "," input2_P2_d24)) (str.++ "," input2_P2_d25)) (str.++ "," input2_P2_d26)) (str.++ "," input2_P2_d27)))); splitHandler input2_P2 28
(assert (= input2_P1 (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ input2_P1_d0 (str.++ "," input2_P1_d1)) (str.++ "," input2_P1_d2)) (str.++ "," input2_P1_d3)) (str.++ "," input2_P1_d4)) (str.++ "," input2_P1_d5)) (str.++ "," input2_P1_d6)) (str.++ "," input2_P1_d7)) (str.++ "," input2_P1_d8)) (str.++ "," input2_P1_d9)) (str.++ "," input2_P1_d10)) (str.++ "," input2_P1_d11)) (str.++ "," input2_P1_d12)) (str.++ "," input2_P1_d13)) (str.++ "," input2_P1_d14)) (str.++ "," input2_P1_d15)) (str.++ "," input2_P1_d16)) (str.++ "," input2_P1_d17)) (str.++ "," input2_P1_d18)) (str.++ "," input2_P1_d19)) (str.++ "," input2_P1_d20)) (str.++ "," input2_P1_d21)) (str.++ "," input2_P1_d22)) (str.++ "," input2_P1_d23)) (str.++ "," input2_P1_d24)) (str.++ "," input2_P1_d25)) (str.++ "," input2_P1_d26)) (str.++ "," input2_P1_d27)))); splitHandler input2_P1 28
(assert (= input3_P2 (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ input3_P2_d0 (str.++ "," input3_P2_d1)) (str.++ "," input3_P2_d2)) (str.++ "," input3_P2_d3)) (str.++ "," input3_P2_d4)) (str.++ "," input3_P2_d5)) (str.++ "," input3_P2_d6)) (str.++ "," input3_P2_d7)) (str.++ "," input3_P2_d8)) (str.++ "," input3_P2_d9)) (str.++ "," input3_P2_d10)) (str.++ "," input3_P2_d11)) (str.++ "," input3_P2_d12)) (str.++ "," input3_P2_d13)) (str.++ "," input3_P2_d14)) (str.++ "," input3_P2_d15)) (str.++ "," input3_P2_d16)) (str.++ "," input3_P2_d17)) (str.++ "," input3_P2_d18)) (str.++ "," input3_P2_d19)) (str.++ "," input3_P2_d20)) (str.++ "," input3_P2_d21)))); splitHandler input3_P2 22
(assert (= input1_P2 (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ (str.++ input1_P2_d0 (str.++ "," input1_P2_d1)) (str.++ "," input1_P2_d2)) (str.++ "," input1_P2_d3)) (str.++ "," input1_P2_d4)) (str.++ "," input1_P2_d5)) (str.++ "," input1_P2_d6)) (str.++ "," input1_P2_d7)) (str.++ "," input1_P2_d8)) (str.++ "," input1_P2_d9)) (str.++ "," input1_P2_d10)) (str.++ "," input1_P2_d11)) (str.++ "," input1_P2_d12)) (str.++ "," input1_P2_d13)) (str.++ "," input1_P2_d14)) (str.++ "," input1_P2_d15)) (str.++ "," input1_P2_d16)) (str.++ "," input1_P2_d17)) (str.++ "," input1_P2_d18)) (str.++ "," input1_P2_d19)) (str.++ "," input1_P2_d20)) (str.++ "," input1_P2_d21)) (str.++ "," input1_P2_d22)) (str.++ "," input1_P2_d23)) (str.++ "," input1_P2_d24)) (str.++ "," input1_P2_d25)) (str.++ "," input1_P2_d26)) (str.++ "," input1_P2_d27)) (str.++ "," input1_P2_d28)) (str.++ "," input1_P2_d29)) (str.++ "," input1_P2_d30)) (str.++ "," input1_P2_d31)) (str.++ "," input1_P2_d32)) (str.++ "," input1_P2_d33)))); splitHandler input1_P2 34
(assert (>= (str.len input2_P1_d2) 7)) 
(assert (>= (str.len input2_P2_d2) 7)) 
(assert  (and (=  x25_P1 ( select  x31 0 ) )  (and (=  x25_P2 ( select  x31 1 ) )  (and (=  x1_P1 input1_P1_d2 )  (and (=  x6_P1 input3_P1_d0 )  (and (=  x9_P1 input1_P1_d33 )  (and (=  x16_P1 input2_P1_d0 )  (and (=  x20_P1 input3_P1_d1 )  (and (=  x21_P1 input3_P1_d4 )  (and (=  x22_P1 input3_P1_d12 )  (and (=  x23_P1 input3_P1_d10 )  (and (=  x24_P1 input3_P1_d5 )  (and (=  x25_P1 ( str.to_int input1_P1_d22  ) )  (and (=  x1_P2 input1_P2_d2 )  (and (=  x6_P2 input3_P2_d0 )  (and (=  x9_P2 input1_P2_d33 )  (and (=  x16_P2 input2_P2_d0 )  (and (=  x20_P2 input3_P2_d1 )  (and (=  x21_P2 input3_P2_d4 )  (and (=  x22_P2 input3_P2_d12 )  (and (=  x23_P2 input3_P2_d10 )  (and (=  x24_P2 input3_P2_d5 )  (and (=  x25_P2 ( str.to_int input1_P2_d22  ) ) (=  x30 (+  x27 x29 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
(assert  (and (=  input3_P1_d12  "Electronics"  )  (and  (not (=  input3_P1_d12  "Home"  ))  (and (=  x1_P1 x6_P1 )  (and (=  ( str.substr input2_P1_d2  0 (- 7 0) )  "1999-01"  )  (and (=  x9_P1 x16_P1 )  (and (isinteger  input1_P1_d22 )  (and (=  input3_P2_d12  "Electronics"  )  (and  (not (=  input3_P2_d12  "Home"  ))  (and (=  x1_P2 x6_P2 )  (and (=  ( str.substr input2_P2_d2  0 (- 7 0) )  "1999-01"  )  (and (=  x9_P2 x16_P2 )  (and (isinteger  input1_P2_d22 )  (and (=  x20_P2 x20_P1 )  (and (=  x21_P2 x21_P1 )  (and (=  x22_P2 x22_P1 )  (and (=  x23_P2 x23_P1 )  (and (=  x24_P2 x24_P1 )  (and (=  ( select  x31 1 ) x27 )  (and (>=  1 0 )  (and (<  1 x28 )  (and (=  ( select  x31 0 ) x29 )  (and (>=  0 0 )  (and (<  0 x28 ) (>=  x28 0 ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) )
(check-sat)
(get-model)
